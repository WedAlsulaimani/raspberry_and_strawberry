##in google colab##

from zipfile import ZipFile
dataset = 'converted_keras.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print("The file was read successfully")



import zipfile
import os

strawberry = "strawberry.zip"  
with zipfile.ZipFile(strawberry, 'r') as zip_ref:
    zip_ref.extractall("strawberry_dataset")

print("Extracted folders:", os.listdir("strawberry_dataset"))



rosberry = "raspberry.zip"
with zipfile.ZipFile(rosberry, 'r') as zip_ref:
    zip_ref.extractall("raspberry_dataset")

print("Extracted folders:", os.listdir("raspberry_dataset"))




import tensorflow as tf

strawberry_dataset = tf.keras.utils.image_dataset_from_directory(
    'strawberry_dataset',
    labels='inferred',
    label_mode='categorical',  # or 'int' depending on your model
    batch_size=32,
    image_size=(224, 224),  # Adjust this to match your Teachable Machine model
    shuffle=True
)




import tensorflow as tf

rosberry_dataset = tf.keras.utils.image_dataset_from_directory(
    'raspberry_dataset',
    labels='inferred',
    label_mode='categorical',  # or 'int' depending on your model
    batch_size=32,
    image_size=(224, 224),  # Adjust this to match your Teachable Machine model
    shuffle=True
)




!pip install TensorFlow==2.12.1




from keras.models import load_model  # TensorFlow is required for Keras to work
from PIL import Image, ImageOps  
import numpy as np

# Disable scientific notation for clarity
np.set_printoptions(suppress=True)

# Load the model
model = load_model("keras_model.h5", compile=False)

# Load the labels
class_names = open("labels.txt", "r").readlines()

# Create the array of the right shape to feed into the keras model
# The 'length' or number of images you can put into the array is
# determined by the first position in the shape tuple, in this case 1
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)


image = Image.open("raspberry_test2.jpg").convert("RGB")

# resizing the image to be at least 224x224 and then cropping from the center
size = (224, 224)
image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)

# turn the image into a numpy array
image_array = np.asarray(image)

# Normalize the image
normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1

# Load the image into the array
data[0] = normalized_image_array

# Predicts the model
prediction = model.predict(data)
index = np.argmax(prediction)
class_name = class_names[index]
confidence_score = prediction[0][index]

# Print prediction and confidence score
print("Class:", class_name[2:], end="")
print("Confidence Score:", confidence_score)


